<?xml version="1.0" encoding="utf-8"?>
<project name="SPWidgets" default="build" basedir=".">
    <description>Build file for the Sharepoint Widgets project.</description>
    <!-- Create the time stamp -->
    <tstamp/>
    
    <!-- Use -debug or -d to print debugging information -->
    
    <!-- set global properties for this build -->
    <property name="/"                value="${file.separator}" />
    
    <property name="src.base"       location="${basedir}" />
    <property name="src.demo"       location="${basedir}${/}demo" />	
    <property name="src.demo.src"   location="${src.demo}${/}src" />	
    <property name="src.pluginDir"  location="${basedir}${/}plugin${/}" />	
    <property name="build"          location="${basedir}${/}BUILD" />
    <property name="build.base"     location="${basedir}${/}BUILD${/}${ant.project.name}" />
    <property name="build.src"      location="${build.base}${/}src" />
    <property name="build.dist"     location="${build.base}${/}dist" />
    <property name="build.tmp"      location="${build.base}${/}tmp" />
    <property name="build.demo"     location="${build.base}${/}demo" />
    <property name="build.demo.src" location="${build.demo}${/}src" />
    <property name="build.doc"      location="${build.base}${/}documentation" />
    <property name="build.tools"    location="${build}${/}tools" />
    
    <property name="build.prop.file"            location="${basedir}${/}my.build.properties" />
    <property name="build.prop.file.template"   location="${basedir}${/}BUILD${/}my.build.properties.template" />
    
	<!-- SRC: Location of SP webpart xml file.
	       used to locate files under the Source folder -->
	<property name="src.demo.webpartName"      value="demo.SPWidgets.webpart" />
	<property name="src.dev.webpartName"       value="demo.SPWidgets.webpart" />
	
	<!-- BUILD: Name of files when creating a build. -->
	<property name="build.demo.webpartName"    value="demo.SPWidgets.webpart" />
	<property name="build.dev.webpartName"     value="dev.test.SPWidgets.webpart" />
	<property name="build.dist.baseFileName"   value="jquery.SPWidgets" />
    
    <property name="build.tools"                location="${build.base}${/}tools" />
	<property name="tool.Markdown"              location="${build.tools}${/}Markdown${/}Markdown.pl" />

	<property name="tool.jsdoc.base"       location="${build.tools}${/}jsdoc-toolkit" />
	<property name="tool.jsdoc.jar"        location="${tool.jsdoc.base}${/}jsrun.jar" />
	<property name="tool.jscompiler.jar"   location="${build.tools}${/}google-closure-compiler${/}compiler.jar" />
	
    <!-- FILESET: patternset.sourceFiles
           All files that can be packaged. -->
    <patternset id="patternset.sourceFiles">
        <include name="src${/}**${/}*"/>
        <include name="demo${/}**${/}*"/>
        <include name="documentation${/}**${/}*"/>
    </patternset>
    
	<!-- DEPLOY PATTERN SET
	        Only Files that are deposited into a folder on SP and for which
	        a CEWP links to. -->
    <patternset id="patternset.deploy">
        <include name="src${/}*.js" />
        <include name="demo${/}**${/}*" />
    	
        <exclude name="**${/}*.xml" />
    </patternset>
    
    <!-- FILESET: All source files -->
    <fileset dir="${src.base}" id="fileset.src.all">
        <patternset refid="patternset.sourceFiles"/>
    </fileset>

	<fileset dir="${build.base}" id="fileset.dist.all">
        <include name="demo${/}**${/}*.webpart*" />
        <include name="src${/}${build.dist.baseFileName}*" />
        <include name="documentation${/}*.html" />
        <include name="documentation${/}web${/}**${/}*" />
		
		<exclude name="demo${/}**${/}dev.*"/>
    </fileset>
    
    <!-- FILESET: fileset.build.pluginFiles
            List of files that will be concatenated and inserted
            into the plugin file
    -->
	<fileset dir="${build.src}" id="fileset.build.pluginFiles"
		  description="List of files that will be concatenated into plugin file.">
        <include name="**${/}*.js" />
		<exclude name="jquery.SPWidgets.js"/>
    </fileset>

	<!-- ++++++ FILE LISTS ++++++ -->
    <filelist id="filelist.build.doc.html" 
        dir="${build.doc}${file.separator}html">
        <file name="SPWidgets.md.html"/>
        <file name="SPWidgets.pickSPUser.md.html"/>
        <file name="SPWidgets.SPControlUpload.md.html"/>
        <file name="SPWidgets.SPControlBoard.md.html"/>
        <file name="SPWidgets.SPControlLookupField.md.html"/>
        <file name="SPWidgets.SPFilterPanel.md.html"/>
        <file name="SPWidgets.SPDateField.md.html"/>
        <file name="SPWidgets.Utilities.md.html"/>
    </filelist>
    
    <filelist id="filelist.build.doc.md" 
        dir="${build.doc}">
        <file name="SPWidgets.md"/>
        <file name="SPWidgets.pickSPUser.md"/>
        <file name="SPWidgets.SPControlUpload.md"/>
        <file name="SPWidgets.SPControlBoard.md"/>
        <file name="SPWidgets.SPControlLookupField.md"/>
        <file name="SPWidgets.SPFilterPanel.md"/>
        <file name="SPWidgets.SPDateField.md"/>
        <file name="SPWidgets.Utilities.md"/>
    </filelist>
    
	<!--*******************************************
            TARGET: init
        ******************************************* -->
    <target name="init">
        <echo message="INIT ------------------------------ [END]" />
    	<echo message="Initiating build. ANT v${ant.version}${line.separator}${ant.file}"/>
        
        <!-- if no build.properties then error -->
        <fail message="ERROR: ${line.separator}
            Missing ${build.prop.file}. You must first create this file ${line.separator}
            before running build targets. Use the following file to create your${line.separator}
            user specific file: ${build.prop.file.template}${line.separator}">
            <condition>
                <not>
                    <available file="${build.prop.file}" property="build.prop.file.exists" />
                </not>
            </condition>
        </fail>
        
        <!-- Load the properties file -->
        <loadproperties srcfile="${build.prop.file}" />
        <echo message="User specific properties file loaded!" />
        
        <!-- Create the build, dist and tmp directories directory -->
        <mkdir dir="${build.base}"/>
        <mkdir dir="${build.src}"/>
        <mkdir dir="${build.demo}"/>
        <mkdir dir="${build.tmp}"/>
        <mkdir dir="${build.dist}"/>
        <mkdir dir="${build.doc}"/>
        <mkdir dir="${build.doc}${/}src" />
        
        <!-- Set the property that indicates if a force copy
             of certain css files should be done. Property feeds
             the doCssForceCopy target -->
        <condition property="forceCssCopyNotNeeded">
            <and>
                <uptodate 
                    srcfile="${src.base}${/}src${/}css.SPControlUpload.css"
                    targetfile="${build.src}${/}css.SPControlUpload.css" />
                <uptodate 
                    srcfile="${src.base}${/}src${/}css.SPControlPickUser.css"
                    targetfile="${build.src}${/}css.SPControlPickUser.css" />
                <uptodate 
                    srcfile="${src.base}${/}src${/}css.SPControlBoard.css"
                    targetfile="${build.src}${/}css.SPControlBoard.css" />
                <uptodate 
                    srcfile="${src.base}${/}src${/}css.SPControlLookupField.css"
                    targetfile="${build.src}${/}css.SPControlLookupField.css" />
                <uptodate 
                    srcfile="${src.base}${/}src${/}css.SPFilterPanel.css"
                    targetfile="${build.src}${/}css.SPFilterPanel.css" />
                <uptodate 
                    srcfile="${src.base}${/}src${/}css.SPDateField.css"
                    targetfile="${build.src}${/}css.SPDateField.css" />
            </and>
        </condition>
        <echo message="forceCssCopyNotNeeded set to: ${forceCssCopyNotNeeded}" />

    	<condition property="forceHtmlCopyNotNeeded">
            <and>
                <uptodate 
                    srcfile="${src.base}${/}src${/}html.SPControlPickUser.html"
                    targetfile="${build.src}${/}html.SPControlPickUser.html" />
                <uptodate 
                    srcfile="${src.base}${/}src${/}html.SPControlBoard.html"
                    targetfile="${build.src}${/}html.SPControlBoard.html" />
                <uptodate 
                    srcfile="${src.base}${/}src${/}html.SPControlLookupField.html"
                    targetfile="${build.src}${/}html.SPControlLookupField.html" />
                <uptodate 
                    srcfile="${src.base}${/}src${/}html.SPFilterPanel.html"
                    targetfile="${build.src}${/}html.SPFilterPanel.html" />
                <uptodate 
                    srcfile="${src.base}${/}src${/}html.SPDateField.html"
                    targetfile="${build.src}${/}html.SPDateField.html" />
                <uptodate 
                    srcfile="${src.base}${/}src${/}html.SPControlUpload.html"
                    targetfile="${build.src}${/}html.SPControlUpload.html" />
            </and>
        </condition>
        <echo message="forceHtmlCopyNotNeeded set to: ${forceHtmlCopyNotNeeded}" />
        
    	<!--
    	   Delete the jquery.SPWidgets files from the build folder. These
    	   are ALWAYS recreated.
    	-->
    	<delete verbose="yes">
            <fileset dir="${build.src}">
                <include name="**${/}*${build.dist.baseFileName}*"/>
            </fileset>
        </delete>

        <delete file="${build.doc}/SPWidgets.html" verbose="true" />
        
        <echo message="INIT ------------------------------ [END]" />
    </target>

    <!-- - - - - - - - - - - - - - - - - - 
          target: doForceCopy
          Call all the other "*forceCopy" targets.
         - - - - - - - - - - - - - - - - - -->
    <target name="doForceCopy">     
        <echo message="DOFORCECOPY ------------------------------ [START]" />
        
        <antcall target="doCssForceCopy" inheritall="true" />
        <antcall target="doHtmlForceCopy" inheritall="true" />
        
        <echo message="DOFORCECOPY -------------------------------- [END]" />
    </target>
    
    <!-- - - - - - - - - - - - - - - - - - 
        target: doCssForceCopy
        Deletes css files from the BUILD folder so that they can
        be rebuilt. This Target runs only if the $forceCssCopyNotNeeded
        parameter is set... that parameter is set in the init Target.
         - - - - - - - - - - - - - - - - - -->
    <target name="doCssForceCopy" unless="forceCssCopyNotNeeded">
        <echo message="doCssForceCopy ------------------------------ [START]" />
        <delete verbose="yes">
            <fileset dir="${build.src}">
                <contains text="//_HAS_PICKSPUSER_CSS_TEMPLATE_" casesensitive="yes"/>
            </fileset>
            <fileset dir="${build.src}">
                <contains text="//_HAS_SPUPLOAD_CSS_TEMPLATE_" casesensitive="yes"/>
            </fileset>
            <fileset dir="${build.src}">
                <contains text="//_HAS_BOARD_CSS_TEMPLATE_" casesensitive="yes"/>
            </fileset>
            <fileset dir="${build.src}">
                <contains text="//_HAS_FILTER_CSS_TEMPLATE_" casesensitive="yes"/>
            </fileset>
            <fileset dir="${build.src}">
                <contains text="//_HAS_LOOKUP_CSS_TEMPLATE_" casesensitive="yes"/>
            </fileset>
            <fileset dir="${build.src}">
                <contains text="//_HAS_DATE_CSS_TEMPLATE_" casesensitive="yes"/>
            </fileset>
        </delete>
        <echo message="doCssForceCopy -------------------------------- [END]" />
    </target>
    
    <!-- - - - - - - - - - - - - - - - - - 
        target: doHtmlForceCopy
        Deletes HTML files from the BUILD folder so that they can
        be rebuilt. This Target runs only if the $forceHtmlCopyNotNeeded
        parameter is set... that parameter is set in the init Target.
         - - - - - - - - - - - - - - - - - -->
    <target name="doHtmlForceCopy" unless="forceHtmlCopyNotNeeded">
        <echo message="doHtmlForceCopy ------------------------------ [START]" />
        <delete verbose="yes">
            <fileset dir="${build.src}">
                <contains text="//_HAS_PICKSPUSER_HTML_TEMPLATE_" casesensitive="yes"/>
            </fileset>
            <fileset dir="${build.src}">
                <contains text="//_HAS_SPUPLOAD_HTML_TEMPLATE_" casesensitive="yes"/>
            </fileset>
            <fileset dir="${build.src}">
                <contains text="//_HAS_BOARD_HTML_TEMPLATE_" casesensitive="yes"/>
            </fileset>
            <fileset dir="${build.src}">
                <contains text="//_HAS_LOOKUP_HTML_TEMPLATE_" casesensitive="yes"/>
            </fileset>
            <fileset dir="${build.src}">
                <contains text="//_HAS_FILTER_HTML_TEMPLATE_" casesensitive="yes"/>
            </fileset>
            <fileset dir="${build.src}">
                <contains text="//_HAS_DATE_HTML_TEMPLATE_" casesensitive="yes"/>
            </fileset>
        	
        	
            <fileset dir="${build.demo}">
                <contains text="//_HAS_DEMO_BODY_TEMPLATE_" casesensitive="yes"/>
            </fileset>
        </delete>
        <echo message="doHtmlForceCopy -------------------------------- [END]" />
    </target>
    
	
    <!--*******************************************
                TARGET: build
        ******************************************* -->
    <target name="build" depends="init,setBuildVersionDate,doForceCopy" 
    	description="build the source " >
        <echo message="BUILD ------------------------------ [START]" />
        
    	<!--   Set version (if not yet done). When creaing a zip file
    	       (dist target) this parameter will be already set. -->
    	<tstamp>
            <format property="build.version" pattern="yyyyMMddhhmmss" />
        </tstamp>
    	
        <!-- ~~~~~ Force a copy of the Demo .html files -->
        <echo message="Deleting HTML files from build folder" />
        <delete verbose="true">
            <fileset 
                dir="${build.demo}" 
                includes="**/*.html" />
            <fileset dir="${build.demo}">
                <contains text="__HAS_EMBEDED_DATA_FROM_BUILD__"/>
                <exclude name="**${/}*.xml"/>
            </fileset>
        </delete>
        
    	
        <!-- get all changed files from the src folder -->
        <echo message="Updating files in ${build.base}" />
        <copy todir="${build.base}" verbose="true" preservelastmodified="true">
            <fileset refid="fileset.src.all" />
        </copy>
        <echo message="Update done!" />
    	
    	<!-- Create the SPWidget's plugin file by concatenating
    	       the individual plugin files together into the 
    	       jquery.SPWidgets file -->
    	<concat destfile="${build.src}${/}${build.dist.baseFileName}.concat.tmp" 
    		  append="false">
            <fileset refid="fileset.build.pluginFiles" />
        </concat>
    	<loadfile property="js.plugin" 
    	    srcfile="${build.src}${/}${build.dist.baseFileName}.concat.tmp" />
    	<replace file="${build.src}${/}${build.dist.baseFileName}.js" 
            token='//_SPWIDGETS_PLUGINS_'
            value="${js.plugin}"
            summary="Yes" />
    	<delete file="${build.src}${/}${build.dist.baseFileName}.concat.tmp" verbose="true" />
        
        <echo message="Calling embed targets..." />
        <antcall target="embedCssTemplates" inheritall="true" />
        <antcall target="embedHtmlTemplates" inheritall="true" />
        <echo message="embed targets Done!" />
    	
    	<!-- Create minified version of plugin file -->
    	<echo message="Building MINIFIED version" />
    	<antcall target="minify" inheritall="true" />
    	<echo message="MINIFY Done!" />
    	
    	<!-- update the build date variable -->
        <echo message="Updating Version date to ${build.date}" />    	
        <replace token="_BUILD_VERSION_DATE_" value="${build.date}">
            <fileset dir="${build.base}" id="">
            	<patternset refid="patternset.sourceFiles" />
    		</fileset>
    	</replace>
    	
    	<!-- update the build VERSION variable -->
        <echo message="Updating Version date to ${build.version}" />
        <replace token="_BUILD_VERSION_NUMBER_" value="${build.version}">
            <fileset dir="${build.base}" id="">
            	<patternset refid="patternset.sourceFiles" />
    		</fileset>
    	</replace>
    	
    	<!-- Update the plugin files in the source root -->
    	<echo message="Copying plugin files to SRC: ${src.pluginDir}" />
        <copy todir="${src.pluginDir}" verbose="true" 
        	   preservelastmodified="true" flatten="true">
        	<fileset dir="${build.base}">
    	        <include name="src${/}${build.dist.baseFileName}*" />
    	    </fileset>
        </copy>
        <echo message="Update done!" />
    	
    	<!-- BUILD the webparts	-->
    	<antcall target="createDemoFiles" inheritall="true" />
    
        <echo message="BUILD -------------------------------- [END]" />
    </target> <!-- target name="build" -->

    <!-- - - - - - - - - - - - - - - - - - 
          target: embedCssTemplates                      
         - - - - - - - - - - - - - - - - - -->
    <target name="embedCssTemplates">
        <echo message="embedCssTemplates ------------------------------ [START]" />
        
        <!-- Load SPControlUpload CSS file and convert it to a javascript string -->
        <getFileAsJsString file="${build.src}${/}css.SPControlUpload.css" 
    		   property="css.SPUpload"/>
        <replace dir="${build.src}" 
                token='"_INCLUDE_SPUPLOAD_CSS_TEMPLATE_";'
                value="${css.SPUpload};${line.separator}//_HAS_SPUPLOAD_CSS_TEMPLATE_"
                summary="Yes">
        </replace>
    	
    	<!-- Load the SPControlPickUser CSS File and replaced where its toke appears -->
    	<getFileAsJsString file="${build.src}${/}css.SPControlPickUser.css" 
    		   property="css.SPPickUser"/>
        <replace dir="${build.src}" 
                token='"_INCLUDE_PICKSPUSER_CSS_TEMPLATE_";'
                value="${css.SPPickUser};${line.separator}//_HAS_PICKSPUSER_CSS_TEMPLATE_"
                summary="Yes">
        </replace>
    	
    	<!-- Load the SPControlBoard File and replaced where its toke appears -->
    	<getFileAsJsString file="${build.src}${/}css.SPControlBoard.css" 
    		   property="css.SPBoard"/>
        <replace dir="${build.src}" 
                token='"_INCLUDE_BOARD_CSS_TEMPLATE_";'
                value="${css.SPBoard};${line.separator}//_HAS_BOARD_CSS_TEMPLATE_"
                summary="Yes">
        </replace>
    	
    	<!-- Load the SPControlLookupField File and replaced where its toke appears -->
    	<getFileAsJsString file="${build.src}${/}css.SPControlLookupField.css" 
    		   property="css.SPLookup"/>
        <replace dir="${build.src}" 
                token='"_INCLUDE_LOOKUP_CSS_TEMPLATE_";'
                value="${css.SPLookup};${line.separator}//_HAS_LOOKUP_CSS_TEMPLATE_"
                summary="Yes">
        </replace>
    	
    	<!-- Load the SPFilterPanel File and replaced where its token appears -->
    	<getFileAsJsString file="${build.src}${/}css.SPFilterPanel.css" 
    		   property="css.SPFilter"/>
        <replace dir="${build.src}" 
                token='"_INCLUDE_FILTER_CSS_TEMPLATE_";'
                value="${css.SPFilter};${line.separator}//_HAS_FILTER_CSS_TEMPLATE_"
                summary="Yes">
        </replace>
    	
    	<!-- Load the SPDatefield File and replaced where its token appears -->
    	<getFileAsJsString 
    		file="${build.src}${/}css.SPDateField.css" 
    		property="css.SPDate"/>
        <replace dir="${build.src}" 
                token='"_INCLUDE_DATE_CSS_TEMPLATE_";'
                value="${css.SPDate};${line.separator}//_HAS_DATE_CSS_TEMPLATE_"
                summary="Yes">
        </replace>
    	
        
        <echo message="embedCssTemplates -------------------------------- [END]" />       
    </target>
    <!-- - - - - - - - - - - - - - - - - - 
          target: embedHtmlTemplates                      
         - - - - - - - - - - - - - - - - - -->
    <target name="embedHtmlTemplates">
        <echo message="embedHtmlTemplates ------------------------------ [START]" />
        
        <!-- Load the SPControlUpload HTML File and replaced where its token appears -->
    	<getFileAsJsString file="${build.src}${/}html.SPControlUpload.html" 
    		   property="html.SPUpload"/>
        <replace dir="${build.src}" 
                token='"_INCLUDE_SPUPLOAD_HTML_TEMPLATE_";'
                value="${html.SPUpload};${line.separator}//_HAS_SPUPLOAD_HTML_TEMPLATE_"
                summary="Yes">
        </replace>
    	
        <!-- Load the SPControlPickUser HTML File and replaced where its token appears -->
    	<getFileAsJsString file="${build.src}${/}html.SPControlPickUser.html" 
    		   property="html.SPPickUser"/>
        <replace dir="${build.src}" 
                token='"_INCLUDE_PICKSPUSER_HTML_TEMPLATE_";'
                value="${html.SPPickUser};${line.separator}//_HAS_PICKSPUSER_HTML_TEMPLATE_"
                summary="Yes">
        </replace>
    	
        <!-- Load the SPControlBoard HTML File and replaced where its token appears -->
    	<getFileAsJsString file="${build.src}${/}html.SPControlBoard.html" 
    		   property="html.SPBoard"/>
        <replace dir="${build.src}" 
                token='"_INCLUDE_BOARD_HTML_TEMPLATE_";'
                value="${html.SPBoard};${line.separator}//_HAS_BOARD_HTML_TEMPLATE_"
                summary="Yes">
        </replace>
    	
        <!-- Load the SPControlLookupField HTML File and replaced where its token appears -->
    	<getFileAsJsString file="${build.src}${/}html.SPControlLookupField.html" 
    		   property="html.SPLookup"/>
        <replace dir="${build.src}" 
                token='"_INCLUDE_LOOKUP_HTML_TEMPLATE_";'
                value="${html.SPLookup};${line.separator}//_HAS_LOOKUP_HTML_TEMPLATE_"
                summary="Yes">
        </replace>
    	
        <!-- Load the SPFilterPanel HTML File and replaced where its token appears -->
    	<getFileAsJsString file="${build.src}${/}html.SPFilterPanel.html" 
    		   property="html.SPFilter"/>
        <replace dir="${build.src}" 
                token='"_INCLUDE_FILTER_HTML_TEMPLATE_";'
                value="${html.SPFilter};${line.separator}//_HAS_FILTER_HTML_TEMPLATE_"
                summary="Yes">
        </replace>
    	
        <!-- Load the SPDateField HTML File and replaced where its token appears -->
    	<getFileAsJsString 
    		file="${build.src}${/}html.SPDateField.html" 
    		property="html.SPDate"/>
        <replace dir="${build.src}" 
                token='"_INCLUDE_DATE_HTML_TEMPLATE_";'
                value="${html.SPDate};${line.separator}//_HAS_DATE_HTML_TEMPLATE_"
                summary="Yes">
        </replace>
    	
        <echo message="embedHtmlTemplates -------------------------------- [END]" />       
    </target>
    
    
    <!--*******************************************
        TARGET: dist
            -   Version is set here prior to calling
                build target.
        ******************************************* -->
    <target name="dist" depends="init,setVersionNumber,build,doc" 
            description="generate the distribution" >
        <echo message="DIST ------------------------------ [START]" />
        <echo>
        	*** WAS CHANGE LOG UPDATE???
        </echo>
        
    	<!-- Make sure that no console.log() statement exist -->
        <fileset dir="${build.base}" id="fileset.filesUsingConsole">
        	<patternset refid="patternset.sourceFiles"/>
        	<containsregexp expression="^\s*?console\."/>
        </fileset>
        <pathconvert pathsep="${line.separator}" property="prop.filesUsingConsole" refid="fileset.filesUsingConsole"/>
        <fail message="FAIL: javasript 'console' statements found:${line.separator} ${prop.filesUsingConsole} ${line.separator}">
            <condition>
                <resourcecount property="count.filesUsingConsole" when="greater" count="0">
                    <fileset refid="fileset.filesUsingConsole"/>
                </resourcecount>
            </condition>
        </fail>
        
        <!-- Define the zipfile name and create it. -->
        <zip destfile="${build.dist}${/}${ant.project.name}.v${build.version}.${DSTAMP}.${TSTAMP}.zip">
            <fileset refid="fileset.dist.all" />
        </zip>
        
        <echo message="DIST -------------------------------- [END]" />
    </target>

    <!-- - - - - - - - - - - - - - - - - - 
          target: setVersionNumber                      
         - - - - - - - - - - - - - - - - - -->
    <target name="setVersionNumber">
    	<input
            message="What is the Version Number?"
    		defaultvalue="0.0"
            addproperty="build.version"
        />
    </target>

	
    <!--*******************************************
                TARGET: setBuildVersionDate
        ******************************************* -->
    <target name="setBuildVersionDate"  
            description="Sets the Build date to not have Time stamp. Only Date" >
        <echo message="setBuildVersionDate ------------------------------ [START]" />
        <!-- Create time stamp formated for inclusion in the version file -->
        <tstamp>
            <format property="build.date" pattern="MMMM dd, yyyy - hh:mm aa" />
        </tstamp>
        <echo message="setBuildVersionDate -------------[${build.date}]-- [END]" />
    </target>
    
    <!--*******************************************
                TARGET: setDevVersionDate
        ******************************************* -->
    <target name="setDevVersionDate"  
            description="Sets the Build date to not have Time stamp. Only Date" >
        <echo message="setDevVersionDate ------------------------------ [START]" />
        <!-- Create time stamp formated for inclusion in the version file -->
        <tstamp>
            <format property="thisDevVersionDate" pattern="MMMM dd, yyyy hh:mm aa" />
        </tstamp>
        
        <!-- Set the version user name -->
        <property name="build.date" value="${user.name}:${thisDevVersionDate}" />
        
        <echo message="setDevVersionDate -------------[${build.date}]-- [END]" />
    </target>
    
    <!--*******************************************
                TARGET: clean
        ******************************************* -->
    <target name="clean" description="clean up" >
        <!-- Delete the ${build.src} and ${build.dist} directory trees -->
        <delete dir="${build.base}"/>
        <echo>
        *--------------------------------------------------------
        |
        |     DONE. BUILD directory cleaned up.
        |
        *--------------------------------------------------------
        </echo>
        
    </target>



	<!-- ================================= 
          target: doc              
         ================================= -->
    <target name="doc" depends="build" description="builds the documentation.">
        <echo message="DOC ---------------------- [START]" />
    	
    	<mkdir dir="${build.doc}${/}html" />
    	
        <echo message="Running Markdown..."/>
    	
    	<apply verbose="true" logerror="true" executable="perl" addsourcefile="true" errorproperty="markdown.error">
            <arg line="${tool.Markdown}"/>
            <!-- Collect the md-files -->
            <fileset dir="${build.doc}" includes="*.md"/>
            <redirector>
                <!-- redirect STDOUT to file in doc/html/ -->
                <outputmapper id="out" type="glob" 
                    from="*.md" 
                    to="${build.doc}${/}html${/}*.md.html"/>
            </redirector>
        </apply>
        <echo message="Markdown Done! ${line.separator} ${markdown.error}"/>
        
        <!-- Concatenate all help files and added it to the html file -->
        <concat destfile="${build.tmp}${/}all.doc.md.html" append="false">
            <filelist refid="filelist.build.doc.html" />
        </concat>
        <loadfile property="build.doc.out" srcfile="${build.tmp}${/}all.doc.md.html" />
        <replace
            casesensitive="true"
            file="${build.doc}/SPWidgets.html"
            token="_BUILD_INCLUDE_DOCUMENTATION_"
            value="${build.doc.out}"
            />
        <concat destfile="${build.tmp}${/}all.doc.md" append="false">
            <filelist refid="filelist.build.doc.md" />
        </concat>
        
        <echo message="DOC ---------------------- [END]" />
    </target>
	
    
    <!-- ================================= 
          target: deploy              
         ================================= -->
    <target name="deploy" depends="setDevVersionDate,build" 
            description="Deploys the latest version of the source 
                        files to the live development site.">
        
        <!-- Make sure we have the properties defined that we need -->
        <fail message="${build.prop.file} missing [me.deploy.location] property or not set!">
            <condition>
                <and>
                    <not>
                        <isset property="${me.deploy.location}" />
                    </not>
                    <length string="${me.deploy.location}" trim="true" length="0" />
                </and>
            </condition>
        </fail>
        
        <!-- Make sure the deployment location exists -->
        <fail message="${build.prop.file} :: property [me.deploy.location] location not found [${me.deploy.location}]!">
            <condition>
                <not>
                    <available file="${me.deploy.location}" type="dir" property="me.deploy.location.exists" />
                </not>
            </condition>
        </fail>
        
        <echo>
*****************************
DEPLOYING TO: ${me.deploy.location}
*****************************
</echo>
        
        <replaceChr property="deploy.cache.id" 
        	   value="${me.deploy.location}" 
        	   regexFind="[\W]"
        	   replaceValue="" />

        <echo message="Deploy ID: ${deploy.cache.id}" />
        
        <copy todir="${me.deploy.location}" verbose="true" preservelastmodified="true">
            <fileset dir="${build.base}">
                <patternset refid="patternset.deploy" />
                <modified>
                    <param name="cache.cachefile" value="${build.base}${/}deploy.cache.${deploy.cache.id}"/>
                </modified>
            </fileset>
        </copy>
        
        <echo message="deploy complete! [ BUILD.VERSION: ${build.version} ]"/>
    </target> <!-- END target name="deploy" -->

   
	
	<!-- ================================= 
          target: minify              
         ================================= -->
    <target name="minify" depends="" description="Minifies files">
    	<echo message="MINIFY ---------------------- [START]" />
        
        <!-- Build SRC documentation -->
        <delete verbose="true">
            <fileset dir="${build.src}" includes="**${/}*.min.*"/>
        </delete>
    	
    	<!-- ${tool.jscompiler.jar} -->
    	
        <java jar="${me.build.tool.googleClosureCompiler}" fork="true" dir="${build.src}${/}" failonerror="true">
            <arg value="--js='${build.src}${/}${build.dist.baseFileName}.js'" />
            <arg value="--js_output_file='${build.src}${/}${build.dist.baseFileName}.min.js'" />
        </java>
        <echo message="MINIFY ---------------------- [END]" />
    </target><!-- End: target = minify -->
	
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: getFileAsJsString
            Reads a file and saves it to a Property as a javascript
            string. Macro does:
            1) escapes all double quotes,
            2) Adds double quotes to start and end of each line
            3) add plus sign to begining of each line (except first
               line of file)
            File content can then be retrieved via the property that
            was given at input.
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="getFileAsJsString">
        <attribute name="file" />
    	<attribute name="property"/>
        <sequential>
        	<loadfile property="@{property}" srcfile="@{file}">
	            <filterchain>
	                <replacestring from='"' to='\"' />
	                <prefixlines prefix='+ "' />
	                <replaceregex pattern="$" replace='\\\\n"' />
	                <tokenfilter>
	                    <filetokenizer/>
	                    <replaceregex pattern='^\+ \"' replace='"' />
	                    <replaceregex pattern='\"${line.separator}$' replace='"' />
	                    <replaceregex pattern='\"\r\n$' replace='"' />
	                    <replaceregex pattern='\"\r$' replace='"' />
	                    <replaceregex pattern='\"\n$' replace='"' />
	                </tokenfilter>
	            </filterchain>
	        </loadfile>
        </sequential>
    </macrodef>

    <!-- = = = = = = = = = = = = = = = = =
          macrodef: replaceChr
          Replaces characters in a values and returns
          (by assigning result to a propertye) the changed
          string.
          INPUT:
            property        -   Property name where value will be stored
            value           -   Value to be manipulated
            regexFind       -   Regular expression for finding.
            replaceValue    -   The replace value
            
          EXAMPLE:
          
            <replaceChr property="" value="" regexFind="" replaceValue="" />
            
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="replaceChr">
        <attribute name="property" />
        <attribute name="value" default="" />
        <attribute name="regexFind" default="/" />
        <attribute name="replaceValue" default="-" />
        
        <sequential>
            <echo message="@{value}" file="${build.tmp}${/}macro.replaceChr.tmp" />
            <loadfile property="@{property}" srcFile="${build.tmp}/macro.replaceChr.tmp">
                <filterchain>
                    <tokenfilter>
                        <replaceregex pattern="@{regexFind}" replace="@{replaceValue}" flags="g"/>
                    </tokenfilter>
                </filterchain>
            </loadfile>
            <delete file="${build.tmp}${/}macro.replaceChr.tmp" />
        </sequential>
    </macrodef>
	
	
	<!--
	==============================================================
	===========        DEMO BUILD TARGETS BELOW  =================
	==============================================================
	-->
	
	
    <!-- set global properties for this build -->
    <property 
        name="demo.file.basename" 
        value="Demo.SPWidgets" />
    <property 
        name="demo.code.file" 
        location="${build.tmp}${/}widget.demo.code.js" />   
    <property 
        name="demo.libraries.file" 
        location="${build.tmp}${/}widget.demo.libs.js" />   
    <property 
        name="demo.spacer.file" 
        location="${build.tmp}${/}spacer.txt" />    
    <property 
        name="demo.file.regular" 
        location="${build.demo}${/}${demo.file.basename}.aspx" />
    <property 
        name="src.demo.file.regular" 
        location="${src.demo}${/}${demo.file.basename}.aspx" />
    
    
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
    <fileset dir="${build.demo.src}" id="fileset.widgets.demo.code">
        <include name="widget.*.demo.js"/>
    </fileset>

    <filelist id="filelist.demo.code.all">
        <file name="${build.demo.src}${/}demo.common.js"/>
    </filelist>
    
    
    <!-- - - - - - - - - - - - - - - - - - 
          target: initDemoBuild                      
         - - - - - - - - - - - - - - - - - -->
    <target name="initDemoBuild">
        
        <echo append="false" file="${demo.spacer.file}">

</echo>
        
    </target>

    
    <!-- ================================= 
          target: createDemoFiles              
         ================================= -->
    <target name="createDemoFiles" 
        depends="initDemoBuild" 
        description="creates the webparts">
        
        <echo message="createDemoFiles ------------------------------ [START]" />
        
        <!-- ~~~~~ Copy files from the src Demo folder to the build -->
        <echo message="Copying files from SRC to BUILD" />
        <copy todir="${build.demo}"
               verbose="true" 
               preservelastmodified="true"
        	   force="true" >
            <fileset dir="${src.demo}">
                <include name="**${/}*"/>
            </fileset>
        </copy>
        
        <!-- ~~~~~ Embed the STYLE Sheet for demo elements -->
        <echo message="CREATING: Embedding .css file" />
        <getFileAsJsString 
            file="${build.demo.src}${/}demo.css" 
            property="css.demo.styles"/>
        
        <replace 
            dir="${build.demo}" 
            token='"__BUILD_STYLES__";' 
            value="${css.demo.styles}; ${line.separator}//__HAS_EMBEDED_DATA_FROM_BUILD__" 
            summary="Yes" 
            />
        
        <!-- ~~~~~ Concatenate all demo code into a single file -->
        <echo message="Concatenating demo code files" />
         <concat 
            destfile="${demo.code.file}" 
            append="false" >
            
            <filelist refid="filelist.demo.code.all" />
            <fileset refid="fileset.widgets.demo.code" />
            
        </concat>
        
        
        <!-- ~~~~~ Concatenate all 3rd party libraries a single file -->
        <echo message="Concatenating 3rd party libraries files" />
         <concat 
            destfile="${demo.libraries.file}" 
            append="false" >
            
            <filelist files="
                ${build.demo.src}${/}ext${/}jquery.js 
                ${demo.spacer.file} 
                ${build.demo.src}${/}ext${/}jquery-ui.js 
                ${demo.spacer.file} 
                ${build.demo.src}${/}ext${/}jquery.SPServices.js 
                ${demo.spacer.file} 
                ${build.demo.src}${/}ext${/}vkBeautify.js 
                ${demo.spacer.file} 
                " />
            
        </concat>
        
        
        <!-- ~~~~~ Create the base Demo file under the demo folder -->
        <echo message="Copying Demo files to appropriate locations" />
        <copy
            file="${build.demo.src}${/}${demo.file.basename}.aspx" 
            tofile="${demo.file.regular}" 
            verbose="true" failonerror="yes" overwrite="yes" force="true" />
        
        
        <!-- ====================================================== -->
        <!-- =====================[[ CREATE DEMO FILE  ]]========== -->
        <!-- ====================================================== -->
        
        
        <!-- ~~~~~ Embed concatenated demo code into demo html file -->
        <echo message="CREATING: Embeding demo code" />
        <loadfile 
            property="js.demo.code" 
            srcfile="${demo.code.file}" />
        
        <replace 
            file="${demo.file.regular}" 
            token='//__BUILD:DEMO_CODE__'
            value="${js.demo.code}"
            summary="Yes" />
        
        <echo message="CREATING: Embeding 3rd party libs" />
        <loadfile 
            property="js.libs.code" 
            srcfile="${demo.libraries.file}" />
        
        <replace 
            file="${demo.file.regular}" 
            token='//__BUILD:EXT_LIBS__'
            value="${js.libs.code}"
            summary="Yes" />
        
        
        <!-- ~~~~~ Embed the built jQuery.SPWidgets.min.js file -->
        <echo message="CREATING: Embeding SPWidgets min file" />
        <loadfile 
            property="js.spwidgets.min" 
            srcfile="${build.src}${/}${build.dist.baseFileName}.min.js" />
        
        <replace 
            file="${demo.file.regular}" 
            token='//__BUILD:DEMO_SPWIDGETS__'
            value="${js.spwidgets.min}"
            summary="Yes"  />
        

        <!-- update the build date variable -->
        <echo message="Embedding BUILD VERSION DATE - ${build.date}" />       
        <replace token="_BUILD_VERSION_DATE_" value="${build.date}">
            <fileset dir="${build.demo}">
                <include name="**${/}*"/>
            </fileset>
        </replace>
        
        
        <!-- update the build VERSION variable -->
        <echo message="Embedding BUILD VERSION - ${build.version}" />
        <replace 
            dir="${build.demo}"
            token='_BUILD_VERSION_NUMBER_' 
            value="${build.version}"  >

            <include name="**${/}*"/>
            
        </replace>
        
        
        <!-- ~~~~~ Copy the built file to the demo folder under src -->
        <echo message="Copying Demo file to src folder" />
        <copy
            file="${demo.file.regular}" 
            tofile="${src.demo.file.regular}" 
            verbose="true" 
            overwrite="yes"
            preservelastmodified="true"  />
        
        
        <echo message="createDemoFiles ------------------------------ [END]" />
        
    </target><!-- END: target: createDemoFiles -->
    
</project>